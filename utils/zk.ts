// @ts-expect-error because the module has no type defined
import snarkjs from 'snarkjs';
// @ts-expect-error because the module has no type defined
import ff from 'ffjavascript';
import generateWitnessJs from './witness_calculator.js';
const circuitDir = 'snarks';
const { unstringifyBigInts } = ff.utils;

const getBinaryPromise = (wasmFile: any) =>
  new Promise((resolve, reject) => {
    fetch(wasmFile, { mode: 'no-cors' })
      .then((response) => {
        if (!response.ok) {
          throw new Error(`failed to load wasm binary file at ${wasmFile}`);
        }
        return response.arrayBuffer();
      })
      .then(resolve)
      .catch(reject);
  });

export async function generateBroadcastParams(
    params: any,
    circuitName: string,
    isPlonk?: boolean,
  ): Promise<any> {
    // read wasm file as buffer
    // read the wasm generated by compiling the circuit
    const buffer = await getBinaryPromise(`${circuitDir}/${circuitName}.wasm`);
    // generate witness
    const witnessCalculator = await generateWitnessJs(buffer);
    const buff = await witnessCalculator.calculateWTNSBin(params, 0);
  
    const provingKey = await fetch(
      isPlonk
        ? `${circuitDir}/${circuitName}_plonk.zkey`
        : `${circuitDir}/${circuitName}.zkey`,
    );
    const provingKeyBuffer = await provingKey.arrayBuffer();
  
    if (isPlonk) {
      const { proof, publicSignals } = await snarkjs.plonk.prove(
        new Uint8Array(provingKeyBuffer),
        buff,
        null,
      );
  
      const editedPublicSignals = unstringifyBigInts(publicSignals);
      const editedProof = unstringifyBigInts(proof);
  
      const callData = await snarkjs.plonk.exportSolidityCallData(
        editedProof,
        editedPublicSignals,
      );
      return JSON.parse(`[${callData}]`);
    }
  
    const { proof, publicSignals } = await snarkjs.groth16.prove(
      new Uint8Array(provingKeyBuffer),
      buff,
      null,
    );
  
    const editedPublicSignals = unstringifyBigInts(publicSignals);
    const editedProof = unstringifyBigInts(proof);
  
    const callData = await snarkjs.groth16.exportSolidityCallData(
      editedProof,
      editedPublicSignals,
    );
  
    return JSON.parse(`[${callData}]`);
  }